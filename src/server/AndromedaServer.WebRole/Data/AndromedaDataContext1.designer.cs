#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Andromeda.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Andromeda")]
	public partial class AndromedaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStar(Andromeda.ServerEntities.Star instance);
    partial void UpdateStar(Andromeda.ServerEntities.Star instance);
    partial void DeleteStar(Andromeda.ServerEntities.Star instance);
    partial void InsertCommodity(Andromeda.ServerEntities.Commodity instance);
    partial void UpdateCommodity(Andromeda.ServerEntities.Commodity instance);
    partial void DeleteCommodity(Andromeda.ServerEntities.Commodity instance);
    partial void InsertCommodityAtStar(Andromeda.ServerEntities.CommodityAtStar instance);
    partial void UpdateCommodityAtStar(Andromeda.ServerEntities.CommodityAtStar instance);
    partial void DeleteCommodityAtStar(Andromeda.ServerEntities.CommodityAtStar instance);
    partial void InsertCommodityInHold(Andromeda.ServerEntities.CommodityInHold instance);
    partial void UpdateCommodityInHold(Andromeda.ServerEntities.CommodityInHold instance);
    partial void DeleteCommodityInHold(Andromeda.ServerEntities.CommodityInHold instance);
    partial void InsertEventLogEntry(Andromeda.ServerEntities.EventLogEntry instance);
    partial void UpdateEventLogEntry(Andromeda.ServerEntities.EventLogEntry instance);
    partial void DeleteEventLogEntry(Andromeda.ServerEntities.EventLogEntry instance);
    partial void InsertPlayer(Andromeda.ServerEntities.Player instance);
    partial void UpdatePlayer(Andromeda.ServerEntities.Player instance);
    partial void DeletePlayer(Andromeda.ServerEntities.Player instance);
    partial void InsertSpaceship(Andromeda.ServerEntities.Spaceship instance);
    partial void UpdateSpaceship(Andromeda.ServerEntities.Spaceship instance);
    partial void DeleteSpaceship(Andromeda.ServerEntities.Spaceship instance);
    partial void InsertAzureTouch(Andromeda.ServerEntities.AzureTouch instance);
    partial void UpdateAzureTouch(Andromeda.ServerEntities.AzureTouch instance);
    partial void DeleteAzureTouch(Andromeda.ServerEntities.AzureTouch instance);
    #endregion
		
		public AndromedaDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AndromedaConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AndromedaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AndromedaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AndromedaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AndromedaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Andromeda.ServerEntities.Star> Stars
		{
			get
			{
				return this.GetTable<Andromeda.ServerEntities.Star>();
			}
		}
		
		public System.Data.Linq.Table<Andromeda.ServerEntities.Commodity> Commodities
		{
			get
			{
				return this.GetTable<Andromeda.ServerEntities.Commodity>();
			}
		}
		
		public System.Data.Linq.Table<Andromeda.ServerEntities.CommodityAtStar> CommodityAtStars
		{
			get
			{
				return this.GetTable<Andromeda.ServerEntities.CommodityAtStar>();
			}
		}
		
		public System.Data.Linq.Table<Andromeda.ServerEntities.CommodityInHold> CommodityInHolds
		{
			get
			{
				return this.GetTable<Andromeda.ServerEntities.CommodityInHold>();
			}
		}
		
		public System.Data.Linq.Table<Andromeda.ServerEntities.EventLogEntry> EventLogEntries
		{
			get
			{
				return this.GetTable<Andromeda.ServerEntities.EventLogEntry>();
			}
		}
		
		public System.Data.Linq.Table<Andromeda.ServerEntities.Player> Players
		{
			get
			{
				return this.GetTable<Andromeda.ServerEntities.Player>();
			}
		}
		
		public System.Data.Linq.Table<Andromeda.ServerEntities.Spaceship> Spaceships
		{
			get
			{
				return this.GetTable<Andromeda.ServerEntities.Spaceship>();
			}
		}
		
		public System.Data.Linq.Table<Andromeda.ServerEntities.AzureTouch> AzureTouches
		{
			get
			{
				return this.GetTable<Andromeda.ServerEntities.AzureTouch>();
			}
		}
	}
}
namespace Andromeda.ServerEntities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stars")]
	public partial class Star : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.Guid> _Guid;
		
		private string _Name;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private EntitySet<CommodityAtStar> _CommodityAtStars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGuidChanging(System.Nullable<System.Guid> value);
    partial void OnGuidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnXChanging(System.Nullable<double> value);
    partial void OnXChanged();
    partial void OnYChanging(System.Nullable<double> value);
    partial void OnYChanged();
    #endregion
		
		public Star()
		{
			this._CommodityAtStars = new EntitySet<CommodityAtStar>(new Action<CommodityAtStar>(this.attach_CommodityAtStars), new Action<CommodityAtStar>(this.detach_CommodityAtStars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Guid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Star_CommodityAtStar", Storage="_CommodityAtStars", ThisKey="Id", OtherKey="StarId")]
		public EntitySet<CommodityAtStar> CommodityAtStars
		{
			get
			{
				return this._CommodityAtStars;
			}
			set
			{
				this._CommodityAtStars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommodityAtStars(CommodityAtStar entity)
		{
			this.SendPropertyChanging();
			entity.Star = this;
		}
		
		private void detach_CommodityAtStars(CommodityAtStar entity)
		{
			this.SendPropertyChanging();
			entity.Star = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Commodities")]
	public partial class Commodity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<CommodityAtStar> _CommodityAtStars;
		
		private EntitySet<CommodityInHold> _CommodityInHolds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Commodity()
		{
			this._CommodityAtStars = new EntitySet<CommodityAtStar>(new Action<CommodityAtStar>(this.attach_CommodityAtStars), new Action<CommodityAtStar>(this.detach_CommodityAtStars));
			this._CommodityInHolds = new EntitySet<CommodityInHold>(new Action<CommodityInHold>(this.attach_CommodityInHolds), new Action<CommodityInHold>(this.detach_CommodityInHolds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commodity_CommodityAtStar", Storage="_CommodityAtStars", ThisKey="Id", OtherKey="CommodityId")]
		public EntitySet<CommodityAtStar> CommodityAtStars
		{
			get
			{
				return this._CommodityAtStars;
			}
			set
			{
				this._CommodityAtStars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commodity_CommodityInHold", Storage="_CommodityInHolds", ThisKey="Id", OtherKey="CommodityId")]
		public EntitySet<CommodityInHold> CommodityInHolds
		{
			get
			{
				return this._CommodityInHolds;
			}
			set
			{
				this._CommodityInHolds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommodityAtStars(CommodityAtStar entity)
		{
			this.SendPropertyChanging();
			entity.Commodity = this;
		}
		
		private void detach_CommodityAtStars(CommodityAtStar entity)
		{
			this.SendPropertyChanging();
			entity.Commodity = null;
		}
		
		private void attach_CommodityInHolds(CommodityInHold entity)
		{
			this.SendPropertyChanging();
			entity.Commodity = this;
		}
		
		private void detach_CommodityInHolds(CommodityInHold entity)
		{
			this.SendPropertyChanging();
			entity.Commodity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommodityAtStars")]
	public partial class CommodityAtStar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _StarId;
		
		private System.Nullable<int> _CommodityId;
		
		private System.Nullable<int> _BuyPrice;
		
		private System.Nullable<int> _SellPrice;
		
		private System.Nullable<int> _Stock;
		
		private System.Nullable<bool> _IsSellable;
		
		private System.Nullable<int> _ProductionRate;
		
		private System.Nullable<int> _MaxCapacity;
		
		private EntityRef<Commodity> _Commodity;
		
		private EntityRef<Star> _Star;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStarIdChanging(System.Nullable<int> value);
    partial void OnStarIdChanged();
    partial void OnCommodityIdChanging(System.Nullable<int> value);
    partial void OnCommodityIdChanged();
    partial void OnBuyPriceChanging(System.Nullable<int> value);
    partial void OnBuyPriceChanged();
    partial void OnSellPriceChanging(System.Nullable<int> value);
    partial void OnSellPriceChanged();
    partial void OnStockChanging(System.Nullable<int> value);
    partial void OnStockChanged();
    partial void OnIsSellableChanging(System.Nullable<bool> value);
    partial void OnIsSellableChanged();
    partial void OnProductionRateChanging(System.Nullable<int> value);
    partial void OnProductionRateChanged();
    partial void OnMaxCapacityChanging(System.Nullable<int> value);
    partial void OnMaxCapacityChanged();
    #endregion
		
		public CommodityAtStar()
		{
			this._Commodity = default(EntityRef<Commodity>);
			this._Star = default(EntityRef<Star>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StarId", DbType="Int")]
		public System.Nullable<int> StarId
		{
			get
			{
				return this._StarId;
			}
			set
			{
				if ((this._StarId != value))
				{
					if (this._Star.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStarIdChanging(value);
					this.SendPropertyChanging();
					this._StarId = value;
					this.SendPropertyChanged("StarId");
					this.OnStarIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommodityId", DbType="Int")]
		public System.Nullable<int> CommodityId
		{
			get
			{
				return this._CommodityId;
			}
			set
			{
				if ((this._CommodityId != value))
				{
					if (this._Commodity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommodityIdChanging(value);
					this.SendPropertyChanging();
					this._CommodityId = value;
					this.SendPropertyChanged("CommodityId");
					this.OnCommodityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyPrice", DbType="Int")]
		public System.Nullable<int> BuyPrice
		{
			get
			{
				return this._BuyPrice;
			}
			set
			{
				if ((this._BuyPrice != value))
				{
					this.OnBuyPriceChanging(value);
					this.SendPropertyChanging();
					this._BuyPrice = value;
					this.SendPropertyChanged("BuyPrice");
					this.OnBuyPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellPrice", DbType="Int")]
		public System.Nullable<int> SellPrice
		{
			get
			{
				return this._SellPrice;
			}
			set
			{
				if ((this._SellPrice != value))
				{
					this.OnSellPriceChanging(value);
					this.SendPropertyChanging();
					this._SellPrice = value;
					this.SendPropertyChanged("SellPrice");
					this.OnSellPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock", DbType="Int")]
		public System.Nullable<int> Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				if ((this._Stock != value))
				{
					this.OnStockChanging(value);
					this.SendPropertyChanging();
					this._Stock = value;
					this.SendPropertyChanged("Stock");
					this.OnStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSellable", DbType="Bit")]
		public System.Nullable<bool> IsSellable
		{
			get
			{
				return this._IsSellable;
			}
			set
			{
				if ((this._IsSellable != value))
				{
					this.OnIsSellableChanging(value);
					this.SendPropertyChanging();
					this._IsSellable = value;
					this.SendPropertyChanged("IsSellable");
					this.OnIsSellableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionRate", DbType="Int")]
		public System.Nullable<int> ProductionRate
		{
			get
			{
				return this._ProductionRate;
			}
			set
			{
				if ((this._ProductionRate != value))
				{
					this.OnProductionRateChanging(value);
					this.SendPropertyChanging();
					this._ProductionRate = value;
					this.SendPropertyChanged("ProductionRate");
					this.OnProductionRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxCapacity", DbType="Int")]
		public System.Nullable<int> MaxCapacity
		{
			get
			{
				return this._MaxCapacity;
			}
			set
			{
				if ((this._MaxCapacity != value))
				{
					this.OnMaxCapacityChanging(value);
					this.SendPropertyChanging();
					this._MaxCapacity = value;
					this.SendPropertyChanged("MaxCapacity");
					this.OnMaxCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commodity_CommodityAtStar", Storage="_Commodity", ThisKey="CommodityId", OtherKey="Id", IsForeignKey=true)]
		public Commodity Commodity
		{
			get
			{
				return this._Commodity.Entity;
			}
			set
			{
				Commodity previousValue = this._Commodity.Entity;
				if (((previousValue != value) 
							|| (this._Commodity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commodity.Entity = null;
						previousValue.CommodityAtStars.Remove(this);
					}
					this._Commodity.Entity = value;
					if ((value != null))
					{
						value.CommodityAtStars.Add(this);
						this._CommodityId = value.Id;
					}
					else
					{
						this._CommodityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Commodity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Star_CommodityAtStar", Storage="_Star", ThisKey="StarId", OtherKey="Id", IsForeignKey=true)]
		public Star Star
		{
			get
			{
				return this._Star.Entity;
			}
			set
			{
				Star previousValue = this._Star.Entity;
				if (((previousValue != value) 
							|| (this._Star.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Star.Entity = null;
						previousValue.CommodityAtStars.Remove(this);
					}
					this._Star.Entity = value;
					if ((value != null))
					{
						value.CommodityAtStars.Add(this);
						this._StarId = value.Id;
					}
					else
					{
						this._StarId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Star");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommodityInHolds")]
	public partial class CommodityInHold : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _SpaceshipId;
		
		private System.Nullable<int> _CommodityId;
		
		private System.Nullable<int> _Count;
		
		private System.Nullable<long> _NetWorth;
		
		private EntityRef<Commodity> _Commodity;
		
		private EntityRef<Spaceship> _Spaceship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSpaceshipIdChanging(System.Nullable<int> value);
    partial void OnSpaceshipIdChanged();
    partial void OnCommodityIdChanging(System.Nullable<int> value);
    partial void OnCommodityIdChanged();
    partial void OnCountChanging(System.Nullable<int> value);
    partial void OnCountChanged();
    partial void OnNetWorthChanging(System.Nullable<long> value);
    partial void OnNetWorthChanged();
    #endregion
		
		public CommodityInHold()
		{
			this._Commodity = default(EntityRef<Commodity>);
			this._Spaceship = default(EntityRef<Spaceship>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpaceshipId", DbType="Int")]
		public System.Nullable<int> SpaceshipId
		{
			get
			{
				return this._SpaceshipId;
			}
			set
			{
				if ((this._SpaceshipId != value))
				{
					if (this._Spaceship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpaceshipIdChanging(value);
					this.SendPropertyChanging();
					this._SpaceshipId = value;
					this.SendPropertyChanged("SpaceshipId");
					this.OnSpaceshipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommodityId", DbType="Int")]
		public System.Nullable<int> CommodityId
		{
			get
			{
				return this._CommodityId;
			}
			set
			{
				if ((this._CommodityId != value))
				{
					if (this._Commodity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommodityIdChanging(value);
					this.SendPropertyChanging();
					this._CommodityId = value;
					this.SendPropertyChanged("CommodityId");
					this.OnCommodityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int")]
		public System.Nullable<int> Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetWorth", DbType="BigInt")]
		public System.Nullable<long> NetWorth
		{
			get
			{
				return this._NetWorth;
			}
			set
			{
				if ((this._NetWorth != value))
				{
					this.OnNetWorthChanging(value);
					this.SendPropertyChanging();
					this._NetWorth = value;
					this.SendPropertyChanged("NetWorth");
					this.OnNetWorthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commodity_CommodityInHold", Storage="_Commodity", ThisKey="CommodityId", OtherKey="Id", IsForeignKey=true)]
		public Commodity Commodity
		{
			get
			{
				return this._Commodity.Entity;
			}
			set
			{
				Commodity previousValue = this._Commodity.Entity;
				if (((previousValue != value) 
							|| (this._Commodity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commodity.Entity = null;
						previousValue.CommodityInHolds.Remove(this);
					}
					this._Commodity.Entity = value;
					if ((value != null))
					{
						value.CommodityInHolds.Add(this);
						this._CommodityId = value.Id;
					}
					else
					{
						this._CommodityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Commodity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Spaceship_CommodityInHold", Storage="_Spaceship", ThisKey="SpaceshipId", OtherKey="Id", IsForeignKey=true)]
		public Spaceship Spaceship
		{
			get
			{
				return this._Spaceship.Entity;
			}
			set
			{
				Spaceship previousValue = this._Spaceship.Entity;
				if (((previousValue != value) 
							|| (this._Spaceship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Spaceship.Entity = null;
						previousValue.CommodityInHolds.Remove(this);
					}
					this._Spaceship.Entity = value;
					if ((value != null))
					{
						value.CommodityInHolds.Add(this);
						this._SpaceshipId = value.Id;
					}
					else
					{
						this._SpaceshipId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Spaceship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventLogEntries")]
	public partial class EventLogEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Timestamp;
		
		private string _Player;
		
		private System.Nullable<System.Guid> _Guid;
		
		private string _EventType;
		
		private string _Error;
		
		private string _Xml;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnPlayerChanging(string value);
    partial void OnPlayerChanged();
    partial void OnGuidChanging(System.Nullable<System.Guid> value);
    partial void OnGuidChanged();
    partial void OnEventTypeChanging(string value);
    partial void OnEventTypeChanged();
    partial void OnErrorChanging(string value);
    partial void OnErrorChanged();
    partial void OnXmlChanging(string value);
    partial void OnXmlChanged();
    #endregion
		
		public EventLogEntry()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player", DbType="NVarChar(100)")]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Guid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventType", DbType="NVarChar(MAX)")]
		public string EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Error", DbType="NVarChar(MAX)")]
		public string Error
		{
			get
			{
				return this._Error;
			}
			set
			{
				if ((this._Error != value))
				{
					this.OnErrorChanging(value);
					this.SendPropertyChanging();
					this._Error = value;
					this.SendPropertyChanged("Error");
					this.OnErrorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Xml", DbType="NVarChar(MAX)")]
		public string Xml
		{
			get
			{
				return this._Xml;
			}
			set
			{
				if ((this._Xml != value))
				{
					this.OnXmlChanging(value);
					this.SendPropertyChanging();
					this._Xml = value;
					this.SendPropertyChanged("Xml");
					this.OnXmlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PlayerName;
		
		private System.Nullable<long> _PlayerMoney;
		
		private System.Nullable<bool> _IsRunLocationEmulator;
		
		private string _RunLocationIp;
		
		private System.Nullable<System.DateTime> _RunLocationTimestamp;
		
		private System.Nullable<System.Guid> _FirstShipGuid;
		
		private EntitySet<Spaceship> _Spaceships;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlayerNameChanging(string value);
    partial void OnPlayerNameChanged();
    partial void OnPlayerMoneyChanging(System.Nullable<long> value);
    partial void OnPlayerMoneyChanged();
    partial void OnIsRunLocationEmulatorChanging(System.Nullable<bool> value);
    partial void OnIsRunLocationEmulatorChanged();
    partial void OnRunLocationIpChanging(string value);
    partial void OnRunLocationIpChanged();
    partial void OnRunLocationTimestampChanging(System.Nullable<System.DateTime> value);
    partial void OnRunLocationTimestampChanged();
    partial void OnFirstShipGuidChanging(System.Nullable<System.Guid> value);
    partial void OnFirstShipGuidChanged();
    #endregion
		
		public Player()
		{
			this._Spaceships = new EntitySet<Spaceship>(new Action<Spaceship>(this.attach_Spaceships), new Action<Spaceship>(this.detach_Spaceships));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerName", DbType="NVarChar(MAX)")]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this.OnPlayerNameChanging(value);
					this.SendPropertyChanging();
					this._PlayerName = value;
					this.SendPropertyChanged("PlayerName");
					this.OnPlayerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerMoney", DbType="BigInt")]
		public System.Nullable<long> PlayerMoney
		{
			get
			{
				return this._PlayerMoney;
			}
			set
			{
				if ((this._PlayerMoney != value))
				{
					this.OnPlayerMoneyChanging(value);
					this.SendPropertyChanging();
					this._PlayerMoney = value;
					this.SendPropertyChanged("PlayerMoney");
					this.OnPlayerMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRunLocationEmulator", DbType="Bit")]
		public System.Nullable<bool> IsRunLocationEmulator
		{
			get
			{
				return this._IsRunLocationEmulator;
			}
			set
			{
				if ((this._IsRunLocationEmulator != value))
				{
					this.OnIsRunLocationEmulatorChanging(value);
					this.SendPropertyChanging();
					this._IsRunLocationEmulator = value;
					this.SendPropertyChanged("IsRunLocationEmulator");
					this.OnIsRunLocationEmulatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunLocationIp", DbType="NVarChar(50)")]
		public string RunLocationIp
		{
			get
			{
				return this._RunLocationIp;
			}
			set
			{
				if ((this._RunLocationIp != value))
				{
					this.OnRunLocationIpChanging(value);
					this.SendPropertyChanging();
					this._RunLocationIp = value;
					this.SendPropertyChanged("RunLocationIp");
					this.OnRunLocationIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunLocationTimestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> RunLocationTimestamp
		{
			get
			{
				return this._RunLocationTimestamp;
			}
			set
			{
				if ((this._RunLocationTimestamp != value))
				{
					this.OnRunLocationTimestampChanging(value);
					this.SendPropertyChanging();
					this._RunLocationTimestamp = value;
					this.SendPropertyChanged("RunLocationTimestamp");
					this.OnRunLocationTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstShipGuid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FirstShipGuid
		{
			get
			{
				return this._FirstShipGuid;
			}
			set
			{
				if ((this._FirstShipGuid != value))
				{
					this.OnFirstShipGuidChanging(value);
					this.SendPropertyChanging();
					this._FirstShipGuid = value;
					this.SendPropertyChanged("FirstShipGuid");
					this.OnFirstShipGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Spaceship", Storage="_Spaceships", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<Spaceship> Spaceships
		{
			get
			{
				return this._Spaceships;
			}
			set
			{
				this._Spaceships.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Spaceships(Spaceship entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Spaceships(Spaceship entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Spaceships")]
	public partial class Spaceship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _PlayerId;
		
		private System.Nullable<System.Guid> _PlayerGuid;
		
		private System.Nullable<int> _DriveCount;
		
		private System.Nullable<int> _SensorCount;
		
		private System.Nullable<int> _CurrentStarId;
		
		private System.Nullable<int> _TargetStarId;
		
		private System.Nullable<System.DateTime> _LaunchDate;
		
		private System.Nullable<int> _ModificationCount;
		
		private System.Nullable<System.DateTime> _DebugTimestamp;
		
		private System.Nullable<bool> _Deleted;
		
		private System.Nullable<int> _ShipModel;
		
		private System.Nullable<int> _CannonCount;
		
		private System.Nullable<int> _ShieldCount;
		
		private System.Nullable<System.DateTime> _LastRaided;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.Guid> _TransponderCode;
		
		private EntitySet<CommodityInHold> _CommodityInHolds;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlayerIdChanging(System.Nullable<int> value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerGuidChanging(System.Nullable<System.Guid> value);
    partial void OnPlayerGuidChanged();
    partial void OnDriveCountChanging(System.Nullable<int> value);
    partial void OnDriveCountChanged();
    partial void OnSensorCountChanging(System.Nullable<int> value);
    partial void OnSensorCountChanged();
    partial void OnCurrentStarIdChanging(System.Nullable<int> value);
    partial void OnCurrentStarIdChanged();
    partial void OnTargetStarIdChanging(System.Nullable<int> value);
    partial void OnTargetStarIdChanged();
    partial void OnLaunchDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLaunchDateChanged();
    partial void OnModificationCountChanging(System.Nullable<int> value);
    partial void OnModificationCountChanged();
    partial void OnDebugTimestampChanging(System.Nullable<System.DateTime> value);
    partial void OnDebugTimestampChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnShipModelChanging(System.Nullable<int> value);
    partial void OnShipModelChanged();
    partial void OnCannonCountChanging(System.Nullable<int> value);
    partial void OnCannonCountChanged();
    partial void OnShieldCountChanging(System.Nullable<int> value);
    partial void OnShieldCountChanged();
    partial void OnLastRaidedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastRaidedChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnTransponderCodeChanging(System.Nullable<System.Guid> value);
    partial void OnTransponderCodeChanged();
    #endregion
		
		public Spaceship()
		{
			this._CommodityInHolds = new EntitySet<CommodityInHold>(new Action<CommodityInHold>(this.attach_CommodityInHolds), new Action<CommodityInHold>(this.detach_CommodityInHolds));
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int")]
		public System.Nullable<int> PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerGuid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PlayerGuid
		{
			get
			{
				return this._PlayerGuid;
			}
			set
			{
				if ((this._PlayerGuid != value))
				{
					this.OnPlayerGuidChanging(value);
					this.SendPropertyChanging();
					this._PlayerGuid = value;
					this.SendPropertyChanged("PlayerGuid");
					this.OnPlayerGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriveCount", DbType="Int")]
		public System.Nullable<int> DriveCount
		{
			get
			{
				return this._DriveCount;
			}
			set
			{
				if ((this._DriveCount != value))
				{
					this.OnDriveCountChanging(value);
					this.SendPropertyChanging();
					this._DriveCount = value;
					this.SendPropertyChanged("DriveCount");
					this.OnDriveCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorCount", DbType="Int")]
		public System.Nullable<int> SensorCount
		{
			get
			{
				return this._SensorCount;
			}
			set
			{
				if ((this._SensorCount != value))
				{
					this.OnSensorCountChanging(value);
					this.SendPropertyChanging();
					this._SensorCount = value;
					this.SendPropertyChanged("SensorCount");
					this.OnSensorCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentStarId", DbType="Int")]
		public System.Nullable<int> CurrentStarId
		{
			get
			{
				return this._CurrentStarId;
			}
			set
			{
				if ((this._CurrentStarId != value))
				{
					this.OnCurrentStarIdChanging(value);
					this.SendPropertyChanging();
					this._CurrentStarId = value;
					this.SendPropertyChanged("CurrentStarId");
					this.OnCurrentStarIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetStarId", DbType="Int")]
		public System.Nullable<int> TargetStarId
		{
			get
			{
				return this._TargetStarId;
			}
			set
			{
				if ((this._TargetStarId != value))
				{
					this.OnTargetStarIdChanging(value);
					this.SendPropertyChanging();
					this._TargetStarId = value;
					this.SendPropertyChanged("TargetStarId");
					this.OnTargetStarIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LaunchDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LaunchDate
		{
			get
			{
				return this._LaunchDate;
			}
			set
			{
				if ((this._LaunchDate != value))
				{
					this.OnLaunchDateChanging(value);
					this.SendPropertyChanging();
					this._LaunchDate = value;
					this.SendPropertyChanged("LaunchDate");
					this.OnLaunchDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModificationCount", DbType="Int")]
		public System.Nullable<int> ModificationCount
		{
			get
			{
				return this._ModificationCount;
			}
			set
			{
				if ((this._ModificationCount != value))
				{
					this.OnModificationCountChanging(value);
					this.SendPropertyChanging();
					this._ModificationCount = value;
					this.SendPropertyChanged("ModificationCount");
					this.OnModificationCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebugTimestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> DebugTimestamp
		{
			get
			{
				return this._DebugTimestamp;
			}
			set
			{
				if ((this._DebugTimestamp != value))
				{
					this.OnDebugTimestampChanging(value);
					this.SendPropertyChanging();
					this._DebugTimestamp = value;
					this.SendPropertyChanged("DebugTimestamp");
					this.OnDebugTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShipModel", DbType="Int")]
		public System.Nullable<int> ShipModel
		{
			get
			{
				return this._ShipModel;
			}
			set
			{
				if ((this._ShipModel != value))
				{
					this.OnShipModelChanging(value);
					this.SendPropertyChanging();
					this._ShipModel = value;
					this.SendPropertyChanged("ShipModel");
					this.OnShipModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CannonCount", DbType="Int")]
		public System.Nullable<int> CannonCount
		{
			get
			{
				return this._CannonCount;
			}
			set
			{
				if ((this._CannonCount != value))
				{
					this.OnCannonCountChanging(value);
					this.SendPropertyChanging();
					this._CannonCount = value;
					this.SendPropertyChanged("CannonCount");
					this.OnCannonCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShieldCount", DbType="Int")]
		public System.Nullable<int> ShieldCount
		{
			get
			{
				return this._ShieldCount;
			}
			set
			{
				if ((this._ShieldCount != value))
				{
					this.OnShieldCountChanging(value);
					this.SendPropertyChanging();
					this._ShieldCount = value;
					this.SendPropertyChanged("ShieldCount");
					this.OnShieldCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastRaided", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastRaided
		{
			get
			{
				return this._LastRaided;
			}
			set
			{
				if ((this._LastRaided != value))
				{
					this.OnLastRaidedChanging(value);
					this.SendPropertyChanging();
					this._LastRaided = value;
					this.SendPropertyChanged("LastRaided");
					this.OnLastRaidedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransponderCode", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TransponderCode
		{
			get
			{
				return this._TransponderCode;
			}
			set
			{
				if ((this._TransponderCode != value))
				{
					this.OnTransponderCodeChanging(value);
					this.SendPropertyChanging();
					this._TransponderCode = value;
					this.SendPropertyChanged("TransponderCode");
					this.OnTransponderCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Spaceship_CommodityInHold", Storage="_CommodityInHolds", ThisKey="Id", OtherKey="SpaceshipId")]
		public EntitySet<CommodityInHold> CommodityInHolds
		{
			get
			{
				return this._CommodityInHolds;
			}
			set
			{
				this._CommodityInHolds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Spaceship", Storage="_Player", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Spaceships.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Spaceships.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommodityInHolds(CommodityInHold entity)
		{
			this.SendPropertyChanging();
			entity.Spaceship = this;
		}
		
		private void detach_CommodityInHolds(CommodityInHold entity)
		{
			this.SendPropertyChanging();
			entity.Spaceship = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AzureTouches")]
	public partial class AzureTouch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private System.Nullable<System.DateTime> _LastTouchDate;
		
		private string _LastTouchIp;
		
		private System.Nullable<System.Guid> _PlayerGuid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLastTouchDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastTouchDateChanged();
    partial void OnLastTouchIpChanging(string value);
    partial void OnLastTouchIpChanged();
    partial void OnPlayerGuidChanging(System.Nullable<System.Guid> value);
    partial void OnPlayerGuidChanged();
    #endregion
		
		public AzureTouch()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(MAX)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastTouchDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastTouchDate
		{
			get
			{
				return this._LastTouchDate;
			}
			set
			{
				if ((this._LastTouchDate != value))
				{
					this.OnLastTouchDateChanging(value);
					this.SendPropertyChanging();
					this._LastTouchDate = value;
					this.SendPropertyChanged("LastTouchDate");
					this.OnLastTouchDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastTouchIp", DbType="NVarChar(MAX)")]
		public string LastTouchIp
		{
			get
			{
				return this._LastTouchIp;
			}
			set
			{
				if ((this._LastTouchIp != value))
				{
					this.OnLastTouchIpChanging(value);
					this.SendPropertyChanging();
					this._LastTouchIp = value;
					this.SendPropertyChanged("LastTouchIp");
					this.OnLastTouchIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerGuid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PlayerGuid
		{
			get
			{
				return this._PlayerGuid;
			}
			set
			{
				if ((this._PlayerGuid != value))
				{
					this.OnPlayerGuidChanging(value);
					this.SendPropertyChanging();
					this._PlayerGuid = value;
					this.SendPropertyChanged("PlayerGuid");
					this.OnPlayerGuidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
